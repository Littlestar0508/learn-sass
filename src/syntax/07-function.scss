@use "sass:meta";
@use "sass:map";
@use "sass:math";

$nothing: null;
$num: 101;
$unit: 180px;

$pretendard: Pretendard;
$spoqa: "Spoqa Han Sans Neo";

$hex: #f94e07;
$keyword: purple;
$color-function: hsl(18, 95%, 50%);

$yes: true;
$no: false;

$units: 20px 10px 0;
$font-families: Pretendard, Helvetica, sans-serif;
$square-bracket: [Verdana sans-serif];

$theme: (
  light: (
    forground: #121916,
    background: #e7e6e7,
  ),
  dark: (
    background: #121916,
    forground: #e7e6e7,
  ),
);

@function getUnit($value) {
  @return math.unit($value);
}

@debug calc(400px + 10%); // calc(400px + 10%)
@debug calc(400px / 2); // 200px
@debug min(100px, calc(1rem + 10%)); // min(100px, 1rem + 10%)

@debug meta.type-of($nothing); // Debug: null
@debug meta.type-of($num); // Debug: number
@debug meta.type-of($unit); // Debug: number

@debug meta.type-of($pretendard); // Debug: string
@debug meta.type-of($spoqa); // Debug: string

@debug meta.type-of($hex); // Debug: color
@debug meta.type-of($keyword); // Debug: color
@debug meta.type-of($color-function); // Debug: color

@debug meta.type-of($yes); // Debug: bool
@debug meta.type-of($no); // Debug: bool

@debug meta.type-of($units); // Debug: list
@debug meta.type-of($font-families); // Debug: list
@debug meta.type-of($square-bracket); // Debug: list

@debug meta.type-of($theme); // Debug: map

@debug getUnit(10);
@debug getUnit(20px);
@debug getUnit(30%);

$value-1: 10px;
$value-2: 5px;

.container {
  animation-delay: 9s + 21s;
  width: $value-1 + $value-2;
  block-size: calc($value-1 - $value-2);
  // inline-size: $value-1 * $value-2;
  // width: math.div($value-1, $value-2);
}

$word1: "Helvetica";
$word2: "Neue";
$word3: sans;
$word4: serif;

.box {
  font-family: "#{$word1 $word2}", "#{$word3 - $word4}";
}

@debug (5px 7px 10px) != (5px, 7px, 10px); // true

// 단위를 제거하는 함수 생성
//나눗셈 연산(10px/5px = 2)

@function removeUnit($valueF) {
  @return math.div($valueF, ($valueF * 0 + 1));
}

.testF {
  line-height: removeUnit(500px);
}

@function rem($valueF, $base: 16) {
  @return math.div(removeUnit($valueF), $base) * 1rem;
}

@function em($valueF, $base) {
  @return math.div(removeUnit($valueF), removeUnit($base)) * 1em;
}

@debug rem(28px); // 1.75rem
@debug rem(111); // 6.9375rem
@debug rem(24, 10); // 2.4em

.testF2 {
  font-size: em(24px, 12px);
}
